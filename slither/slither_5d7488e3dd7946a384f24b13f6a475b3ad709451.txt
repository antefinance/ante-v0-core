'npx hardhat compile --force' running
Compiling 31 files with 0.7.6
Generating typings for: 31 artifacts in dir: typechain for target: ethers-v5
Successfully generated 51 typings!
Compilation finished successfully

@uniswap/lib/contracts/libraries/FixedPoint.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.

@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.

@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.

@openzeppelin/contracts/token/ERC20/ERC20.sol:55:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
    constructor (string memory name_, string memory symbol_) public {
    ^ (Relevant source part starts here and spans across multiple lines).

contracts/AntePool.sol:623:5: Warning: Function state mutability can be restricted to view
    function _testNotFailed() internal {
    ^ (Relevant source part starts here and spans across multiple lines).

contracts/mock/AnteAlwaysFailTest.sol:17:5: Warning: Function state mutability can be restricted to pure
    function checkTestPasses() public override returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).

contracts/mock/AnteAlwaysPassTest.sol:17:5: Warning: Function state mutability can be restricted to pure
    function checkTestPasses() public override returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).

contracts/mock/AnteDummyTest.sol:27:5: Warning: Function state mutability can be restricted to pure
    function checkTestPasses() public view override returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).

contracts/mock/AnteInvalidTest.sol:18:5: Warning: Function state mutability can be restricted to pure
    function checkTestTypo() public view returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:[91m
AntePool._safeTransfer(address,uint256) (contracts/AntePool.sol#610-612) sends eth to arbitrary user
	Dangerous calls:
	- to.transfer(_min(amount,address(this).balance)) (contracts/AntePool.sol#611)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
UniswapV2OracleLibrary.currentBlockTimestamp() (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#11-13) uses a weak PRNG: "uint32(block.timestamp % 2 ** 32) (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#12)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG[0m
INFO:Detectors:[91m
AnteTest.testedContracts (contracts/AnteTest.sol#27) is never initialized. It is used in:
	- AnteTest.getTestedContracts() (contracts/AnteTest.sol#39-41)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables[0m
INFO:Detectors:[93m
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv = (3 * denominator) ^ 2 (contracts/libraries/FullMath.sol#93)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#97)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#98)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#99)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#100)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#101)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-denominator = denominator / twos (contracts/libraries/FullMath.sol#73)
	-inv *= 2 - denominator * inv (contracts/libraries/FullMath.sol#102)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) performs a multiplication on the result of a division:
	-prod0 = prod0 / twos (contracts/libraries/FullMath.sol#78)
	-result = prod0 * inv (contracts/libraries/FullMath.sol#110)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
AnteWETH9Test.checkTestPasses() (contracts/examples/AnteWETH9Test.sol#36-38) uses a dangerous strict equality:
	- address(wETH9Token).balance == wETH9Token.totalSupply() (contracts/examples/AnteWETH9Test.sol#37)
AnteOddBlockTest.checkTestPasses() (contracts/mock/AnteOddBlockTest.sol#29-36) uses a dangerous strict equality:
	- (block.number % 2 == 1) (contracts/mock/AnteOddBlockTest.sol#32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in AntePool.initialize(IAnteTest) (contracts/AntePool.sol#161-172):
	External calls:
	- require(bool,string)(_anteTest.checkTestPasses(),ANTE: AnteTest does not implement checkTestPasses or test fails) (contracts/AntePool.sol#167)
	State variables written after the call(s):
	- _initialized = true (contracts/AntePool.sol#169)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
FixedPoint.mul(FixedPoint.uq112x112,uint256).z (node_modules/@uniswap/lib/contracts/libraries/FixedPoint.sol#38) is a local variable never initialized
AntePool._checkTestNoRevert().passes (contracts/AntePool.sol#568) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
AntePool._checkTestNoRevert() (contracts/AntePool.sol#567-573) ignores return value by anteTest.checkTestPasses() (contracts/AntePool.sol#568-572)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
AnteETH2DepositTest.constructor(address)._depositContractAddr (contracts/examples/AnteETH2DepositTest.sol#28) lacks a zero-check on :
		- depositContractAddr = _depositContractAddr (contracts/examples/AnteETH2DepositTest.sol#30)
AnteEthDevRugTest.constructor(address)._ethDevAddr (contracts/examples/AnteEthDevRugTest.sol#26) lacks a zero-check on :
		- ethDevAddr = _ethDevAddr (contracts/examples/AnteEthDevRugTest.sol#28)
AnteUSDCSupplyTest.constructor(address)._usdcAddr (contracts/examples/AnteUSDCSupplyTest.sol#30) lacks a zero-check on :
		- usdcAddr = _usdcAddr (contracts/examples/AnteUSDCSupplyTest.sol#31)
AnteUSDTSupplyTest.constructor(address)._usdtAddr (contracts/examples/AnteUSDTSupplyTest.sol#30) lacks a zero-check on :
		- usdtAddr = _usdtAddr (contracts/examples/AnteUSDTSupplyTest.sol#31)
AnteWBTCSupplyTest.constructor(address)._wBTCAddr (contracts/examples/AnteWBTCSupplyTest.sol#29) lacks a zero-check on :
		- wBTCAddr = _wBTCAddr (contracts/examples/AnteWBTCSupplyTest.sol#33)
AnteWETH9Test.constructor(address)._wETH9Addr (contracts/examples/AnteWETH9Test.sol#26) lacks a zero-check on :
		- wETH9Addr = _wETH9Addr (contracts/examples/AnteWETH9Test.sol#27)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
INFO:Detectors:[92m
AntePoolTest.checkTestPasses() (contracts/examples/AntePoolTest.sol#29-44) has external calls inside a loop: testedContracts[i].balance < (antePool.getTotalChallengerStaked() + antePool.getTotalStaked() + antePool.getTotalPendingWithdraw() - antePool.totalPaidOut()) (contracts/examples/AntePoolTest.sol#34-38)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Variable 'AntePool._checkTestNoRevert().passes (contracts/AntePool.sol#568)' in AntePool._checkTestNoRevert() (contracts/AntePool.sol#567-573) potentially used before declaration: passes (contracts/AntePool.sol#569)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables[0m
INFO:Detectors:[92m
Reentrancy in AntePool.initialize(IAnteTest) (contracts/AntePool.sol#161-172):
	External calls:
	- require(bool,string)(_anteTest.checkTestPasses(),ANTE: AnteTest does not implement checkTestPasses or test fails) (contracts/AntePool.sol#167)
	State variables written after the call(s):
	- anteTest = _anteTest (contracts/AntePool.sol#171)
	- pendingFailure = false (contracts/AntePool.sol#170)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in AntePoolFactory.createPool(address) (contracts/AntePoolFactory.sol#27-48):
	External calls:
	- AntePool(testPool).initialize(anteTest) (contracts/AntePoolFactory.sol#45)
	Event emitted after the call(s):
	- AntePoolCreated(testAddr,testPool) (contracts/AntePoolFactory.sol#47)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
UniswapV2OracleLibrary.currentCumulativePrices(address) (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#16-34) uses timestamp for comparisons
	Dangerous comparisons:
	- blockTimestampLast != blockTimestamp (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#25)
AntePool.withdrawStake() (contracts/AntePool.sol#248-264) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(unstakeUser.lastUnstakeTimestamp < block.timestamp - UNSTAKE_DELAY,ANTE: must wait 24 hours to withdraw stake) (contracts/AntePool.sol#251-254)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
AntePoolFactory.createPool(address) (contracts/AntePoolFactory.sol#27-48) uses assembly
	- INLINE ASM (contracts/AntePoolFactory.sol#38-40)
FullMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/FullMath.sol#20-112) uses assembly
	- INLINE ASM (contracts/libraries/FullMath.sol#32-36)
	- INLINE ASM (contracts/libraries/FullMath.sol#41-43)
	- INLINE ASM (contracts/libraries/FullMath.sol#58-60)
	- INLINE ASM (contracts/libraries/FullMath.sol#62-65)
	- INLINE ASM (contracts/libraries/FullMath.sol#72-74)
	- INLINE ASM (contracts/libraries/FullMath.sol#77-79)
	- INLINE ASM (contracts/libraries/FullMath.sol#83-85)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Different versions of Solidity is used:
	- Version used: ['>=0.4.0', '>=0.5.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '>=0.7.0', '^0.7.0']
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- >=0.4.0 (node_modules/@uniswap/lib/contracts/libraries/FixedPoint.sol#1)
	- >=0.5.0 (node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol#1)
	- >=0.5.0 (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#1)
	- ^0.7.0 (contracts/AntePool.sol#12)
	- ^0.7.0 (contracts/AntePoolFactory.sol#12)
	- ^0.7.0 (contracts/AnteTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteAVLDropTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteETH2DepositTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteEthDevRugTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteIronPegTest.sol#12)
	- ^0.7.0 (contracts/examples/AntePoolTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteUSDCSupplyTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteUSDTSupplyTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteWBTCSupplyTest.sol#12)
	- ^0.7.0 (contracts/examples/AnteWETH9Test.sol#12)
	- ^0.7.0 (contracts/interfaces/IAntePool.sol#12)
	- ^0.7.0 (contracts/interfaces/IAntePoolFactory.sol#12)
	- ^0.7.0 (contracts/interfaces/IAnteTest.sol#12)
	- >=0.7.0 (contracts/libraries/FullMath.sol#3)
	- ^0.7.0 (contracts/libraries/IterableSet.sol#12)
	- ^0.7.0 (contracts/mock/AnteAlwaysFailTest.sol#12)
	- ^0.7.0 (contracts/mock/AnteAlwaysPassTest.sol#12)
	- ^0.7.0 (contracts/mock/AnteDummyTest.sol#12)
	- ^0.7.0 (contracts/mock/AnteInvalidTest.sol#12)
	- ^0.7.0 (contracts/mock/AnteOddBlockTest.sol#12)
	- ^0.7.0 (contracts/mock/AnteRevertingTest.sol#12)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
AntePool._calculateChallengerEligibility() (contracts/AntePool.sol#553-563) has costly operations inside a loop:
	- eligibilityInfo.eligibleAmount = eligibilityInfo.eligibleAmount.add(_storedBalance(challengerInfo.userInfo[challenger],challengerInfo)) (contracts/AntePool.sol#558-560)
AnteAVLDropTest.constructor(address[]) (contracts/examples/AnteAVLDropTest.sol#25-36) has costly operations inside a loop:
	- totalAVL = totalAVL.add(testedContracts[i].balance) (contracts/examples/AnteAVLDropTest.sol#31)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop[0m
INFO:Detectors:[92m
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3) is too complex
Pragma version>=0.4.0 (node_modules/@uniswap/lib/contracts/libraries/FixedPoint.sol#1) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol#1) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#1) allows old versions
Pragma version^0.7.0 (contracts/AntePool.sol#12) allows old versions
Pragma version^0.7.0 (contracts/AntePoolFactory.sol#12) allows old versions
Pragma version^0.7.0 (contracts/AnteTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteAVLDropTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteETH2DepositTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteEthDevRugTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteIronPegTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AntePoolTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteUSDCSupplyTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteUSDTSupplyTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteWBTCSupplyTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/examples/AnteWETH9Test.sol#12) allows old versions
Pragma version^0.7.0 (contracts/interfaces/IAntePool.sol#12) allows old versions
Pragma version^0.7.0 (contracts/interfaces/IAntePoolFactory.sol#12) allows old versions
Pragma version^0.7.0 (contracts/interfaces/IAnteTest.sol#12) allows old versions
Pragma version>=0.7.0 (contracts/libraries/FullMath.sol#3) allows old versions
Pragma version^0.7.0 (contracts/libraries/IterableSet.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteAlwaysFailTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteAlwaysPassTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteDummyTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteInvalidTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteOddBlockTest.sol#12) allows old versions
Pragma version^0.7.0 (contracts/mock/AnteRevertingTest.sol#12) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Struct FixedPoint.uq112x112 (node_modules/@uniswap/lib/contracts/libraries/FixedPoint.sol#7-9) is not in CapWords
Struct FixedPoint.uq144x112 (node_modules/@uniswap/lib/contracts/libraries/FixedPoint.sol#13-15) is not in CapWords
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol#18) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol#19) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol#36) is not in mixedCase
Parameter AntePool.initialize(IAnteTest)._anteTest (contracts/AntePool.sol#161) is not in mixedCase
Parameter AntePool.getStoredBalance(address,bool)._user (contracts/AntePool.sol#405) is not in mixedCase
Parameter AntePool.getPendingWithdrawAmount(address)._user (contracts/AntePool.sol#428) is not in mixedCase
Parameter AntePool.getPendingWithdrawAllowedTime(address)._user (contracts/AntePool.sol#433) is not in mixedCase
Parameter AntePool.getCheckTestAllowedBlock(address)._user (contracts/AntePool.sol#441) is not in mixedCase
Parameter AntePool.getUserStartAmount(address,bool)._user (contracts/AntePool.sol#446) is not in mixedCase
Variable AntePool._initialized (contracts/AntePool.sol#102) is not in mixedCase
Variable AntePool._bounty (contracts/AntePool.sol#104) is not in mixedCase
Variable AntePool._remainingStake (contracts/AntePool.sol#106) is not in mixedCase
Parameter AnteOddBlockTest.setWillTest(bool)._willTest (contracts/mock/AnteOddBlockTest.sol#25) is not in mixedCase
Parameter AnteRevertingTest.setWillRevert(bool)._willRevert (contracts/mock/AnteRevertingTest.sol#19) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
Redundant expression "this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements[0m
INFO:Detectors:[92m
Reentrancy in AntePool._unstake(uint256,bool,AntePool.PoolSideInfo,AntePool.UserInfo) (contracts/AntePool.sol#468-506):
	External calls:
	- _safeTransfer(msg.sender,amount) (contracts/AntePool.sol#495)
		- to.transfer(_min(amount,address(this).balance)) (contracts/AntePool.sol#611)
	Event emitted after the call(s):
	- Unstake(msg.sender,amount,isChallenger) (contracts/AntePool.sol#505)
Reentrancy in AntePool.claim() (contracts/AntePool.sol#319-334):
	External calls:
	- _safeTransfer(msg.sender,amount) (contracts/AntePool.sol#332)
		- to.transfer(_min(amount,address(this).balance)) (contracts/AntePool.sol#611)
	Event emitted after the call(s):
	- ClaimPaid(msg.sender,amount) (contracts/AntePool.sol#333)
Reentrancy in AntePool.withdrawStake() (contracts/AntePool.sol#248-264):
	External calls:
	- _safeTransfer(msg.sender,amount) (contracts/AntePool.sol#261)
		- to.transfer(_min(amount,address(this).balance)) (contracts/AntePool.sol#611)
	Event emitted after the call(s):
	- WithdrawStake(msg.sender,amount) (contracts/AntePool.sol#263)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4[0m
INFO:Detectors:[92m
Variable UniswapV2OracleLibrary.currentCumulativePrices(address).price0Cumulative (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#18) is too similar to UniswapV2OracleLibrary.currentCumulativePrices(address).price1Cumulative (node_modules/@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol#18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar[0m
INFO:Detectors:[92m
AntePoolFactory.createPool(address) (contracts/AntePoolFactory.sol#27-48) uses literals with too many digits:
	- bytecode = type()(AntePool).creationCode (contracts/AntePoolFactory.sol#35)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
name() should be declared external:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66)
symbol() should be declared external:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74)
decimals() should be declared external:
	- ERC20.decimals() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#89-91)
totalSupply() should be declared external:
	- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#96-98)
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#103-105)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#115-118)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#123-125)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#134-137)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#152-156)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#170-173)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#189-192)
checkTestPasses() should be declared external:
	- AnteAVLDropTest.checkTestPasses() (contracts/examples/AnteAVLDropTest.sol#38-49)
	- AnteAlwaysFailTest.checkTestPasses() (contracts/mock/AnteAlwaysFailTest.sol#17-19)
	- AnteAlwaysPassTest.checkTestPasses() (contracts/mock/AnteAlwaysPassTest.sol#17-19)
	- AnteDummyTest.checkTestPasses() (contracts/mock/AnteDummyTest.sol#27-29)
	- AnteIronPegTest.checkTestPasses() (contracts/examples/AnteIronPegTest.sol#108-126)
	- AnteOddBlockTest.checkTestPasses() (contracts/mock/AnteOddBlockTest.sol#29-36)
	- AntePoolTest.checkTestPasses() (contracts/examples/AntePoolTest.sol#29-44)
	- AnteRevertingTest.checkTestPasses() (contracts/mock/AnteRevertingTest.sol#23-27)
checkTestTypo() should be declared external:
	- AnteInvalidTest.checkTestTypo() (contracts/mock/AnteInvalidTest.sol#18-20)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:. analyzed (31 contracts with 75 detectors), 106 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
